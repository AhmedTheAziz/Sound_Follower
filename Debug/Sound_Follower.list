
Sound_Follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020fc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800220c  0800220c  0000320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08002214  08002214  00003214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800221c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08002228  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002228  000041b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007257  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cc  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  0000d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043c  00000000  00000000  0000da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b7b  00000000  00000000  0000de54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007eeb  00000000  00000000  000249cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecb7  00000000  00000000  0002c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000bb5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000bcd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080021f4 	.word	0x080021f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080021f4 	.word	0x080021f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <_ZN7Clock72C1Ev>:
 *      Author: AHMED ABDELAZIZ
 */

#include "clock72.h"
uint8_t Clock72::Countclk;
 Clock72::Clock72 ()
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 {
	 if(Countclk==0)
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_ZN7Clock72C1Ev+0x2c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_ZN7Clock72C1Ev+0x16>
	 {
	 Clock_Init();
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f80d 	bl	8000fa4 <_ZN7Clock7210Clock_InitEv>
 }
	 Countclk++;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <_ZN7Clock72C1Ev+0x2c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <_ZN7Clock72C1Ev+0x2c>)
 8000f94:	701a      	strb	r2, [r3, #0]
 }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000028 	.word	0x20000028

08000fa4 <_ZN7Clock7210Clock_InitEv>:
void Clock72::Clock_Init()
	{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
		//Adding wait states to memory reads.
		FLASH->ACR	= 0x12;	// for system clock between 48 and 72MHz
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <_ZN7Clock7210Clock_InitEv+0x9c>)
 8000fae:	2212      	movs	r2, #18
 8000fb0:	601a      	str	r2, [r3, #0]
		RCC->CR |= (1<<16);	//HSE on
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<17)));	//wait until HSE ready
 8000fbe:	bf00      	nop
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f4      	bne.n	8000fc0 <_ZN7Clock7210Clock_InitEv+0x1c>
		RCC->CR |= (1<<26);	//PLL2 on (test)25
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fe0:	6013      	str	r3, [r2, #0]
		RCC->CFGR |= (1<<16);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (7<<18);	// mult by 9	--->72MHz
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000ff4:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000ff8:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (1<<10);	//APB1 = 36MHz. See bus clocks.
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8001000:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001004:	6053      	str	r3, [r2, #4]
		RCC->CR |= (1<<24);	//enable PLL
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 800100c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001010:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<25)));	//wait until locked
 8001012:	bf00      	nop
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f4      	bne.n	8001014 <_ZN7Clock7210Clock_InitEv+0x70>
		RCC->CFGR |= (2<<0);	//PLL as clock source
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6053      	str	r3, [r2, #4]
	}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40022000 	.word	0x40022000
 8001044:	40021000 	.word	0x40021000

08001048 <_ZN6configC1Ev>:
#include "config.h"

uint8_t config::Count;

/// <Constructor>
 config::config()
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 {
	 if (Count ==0)
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <_ZN6configC1Ev+0x34>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <_ZN6configC1Ev+0x1c>
	 {
	 RCC->APB2ENR =0x00000000;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <_ZN6configC1Ev+0x38>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
	 RCC->APB1ENR=0x00000000;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_ZN6configC1Ev+0x38>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
	 }
	 Count++;
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <_ZN6configC1Ev+0x34>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <_ZN6configC1Ev+0x34>)
 800106e:	701a      	strb	r2, [r3, #0]
 }
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000029 	.word	0x20000029
 8001080:	40021000 	.word	0x40021000

08001084 <_ZN6config4ENPAEv>:

 /// <Enable Ports and AFIOs>
	 void config::ENPA()
	 {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<2);
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <_ZN6config4ENPAEv+0x20>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <_ZN6config4ENPAEv+0x20>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
	 }
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <_ZN6config4ENPBEv>:
	 void config::ENPB()
	 {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<3);
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <_ZN6config4ENPBEv+0x20>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <_ZN6config4ENPBEv+0x20>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
	 }
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <_ZN6config4ENPCEv>:
	 void config::ENPC()
	 {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<4);
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <_ZN6config4ENPCEv+0x20>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <_ZN6config4ENPCEv+0x20>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6193      	str	r3, [r2, #24]
	 }
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <_ZN6config5AFIOPEv>:
	 void config::AFIOP()
	 {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<0);
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <_ZN6config5AFIOPEv+0x20>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <_ZN6config5AFIOPEv+0x20>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6193      	str	r3, [r2, #24]
	 }
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <_ZN6configD1Ev>:
  }
  */


 ///<Destructor>
 config::~config()
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
		{

		}
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <main>:
}
///< UART Tasks ENDS	>
*/

int main()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	///<configurations BEGINS>
	config port;
 800112e:	463b      	mov	r3, r7
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff89 	bl	8001048 <_ZN6configC1Ev>
	port.ENPB();//enable RCC for port B
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffb5 	bl	80010a8 <_ZN6config4ENPBEv>
	port.ENPA();//enable RCC for port A
 800113e:	463b      	mov	r3, r7
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff9f 	bl	8001084 <_ZN6config4ENPAEv>
while(1)
{
	///<Testing UltraSonic Sensor>
    // Calculate distance and check for alert

float dis= us.Read_Distance();
 8001146:	4810      	ldr	r0, [pc, #64]	@ (8001188 <main+0x60>)
 8001148:	f000 ffaa 	bl	80020a0 <_ZN10UltraSound13Read_DistanceEv>
 800114c:	6078      	str	r0, [r7, #4]
if(dis<=30)
 800114e:	490f      	ldr	r1, [pc, #60]	@ (800118c <main+0x64>)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fed1 	bl	8000ef8 <__aeabi_fcmple>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <main+0x42>
{
	LED_R.ON();
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <main+0x68>)
 800115e:	f000 fb31 	bl	80017c4 <_ZN3OIP2ONEv>
	LED_B.OFF();
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <main+0x6c>)
 8001164:	f000 fb44 	bl	80017f0 <_ZN3OIP3OFFEv>
 8001168:	e005      	b.n	8001176 <main+0x4e>
}
else
		{
	LED_B.ON();
 800116a:	480a      	ldr	r0, [pc, #40]	@ (8001194 <main+0x6c>)
 800116c:	f000 fb2a 	bl	80017c4 <_ZN3OIP2ONEv>
	LED_R.OFF();
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <main+0x68>)
 8001172:	f000 fb3d 	bl	80017f0 <_ZN3OIP3OFFEv>
		}
	///<Testing the Servo Motor>
	servo.lookout();
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <main+0x70>)
 8001178:	f000 fce0 	bl	8001b3c <_ZN5Servo7lookoutEv>
	del.delay_us(5000);
 800117c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <main+0x74>)
 8001182:	f000 fd56 	bl	8001c32 <_ZN5Delay8delay_usEm>
	//us.Calc_Distance();
	///<test(1) Ends>
	//not needed infinte loop
}
 8001186:	e7de      	b.n	8001146 <main+0x1e>
 8001188:	200000f8 	.word	0x200000f8
 800118c:	41f00000 	.word	0x41f00000
 8001190:	2000009c 	.word	0x2000009c
 8001194:	2000008c 	.word	0x2000008c
 8001198:	200000cc 	.word	0x200000cc
 800119c:	200000c4 	.word	0x200000c4

080011a0 <_ZN9US_ConfigD1Ev>:
#include "timer2.h"
#include"systik.h"
#define HC_SR04_ECHOCAPTURE_RESET     0U
#define HC_SR04_ECHOCAPTURE_COMPLETE  1U
#define SpeedofSound 0.0343/2
struct US_Config
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3310      	adds	r3, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fc1f 	bl	80019f0 <_ZN3OIPD1Ev>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fc1b 	bl	80019f0 <_ZN3OIPD1Ev>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZN5ServoD1Ev>:
#include "main.h"
#include "timer2.h"
#include "op.h"
#include "systik.h"

class Servo
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fe24 	bl	8001e1c <_ZN6Timer2D1Ev>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZN11Moto_ConfigD1Ev>:
#include "op.h"
#include "timer3.h"


///<Struct for Pins to be configured as O/P
struct Moto_Config
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3320      	adds	r3, #32
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc00 	bl	80019f0 <_ZN3OIPD1Ev>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3310      	adds	r3, #16
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fbfb 	bl	80019f0 <_ZN3OIPD1Ev>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fbf7 	bl	80019f0 <_ZN3OIPD1Ev>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_Z41__static_initialization_and_destruction_0ii>:
return 0;
}
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d15f      	bne.n	80012dc <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	4293      	cmp	r3, r2
 8001224:	d15a      	bne.n	80012dc <_Z41__static_initialization_and_destruction_0ii+0xd0>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::AF}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 8001226:	2303      	movs	r3, #3
 8001228:	2205      	movs	r2, #5
 800122a:	4940      	ldr	r1, [pc, #256]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800122c:	4840      	ldr	r0, [pc, #256]	@ (8001330 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800122e:	f000 f8e3 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
 8001232:	2303      	movs	r3, #3
 8001234:	2201      	movs	r2, #1
 8001236:	493f      	ldr	r1, [pc, #252]	@ (8001334 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001238:	483f      	ldr	r0, [pc, #252]	@ (8001338 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800123a:	f000 f8dd 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
 800123e:	230b      	movs	r3, #11
 8001240:	2206      	movs	r2, #6
 8001242:	493a      	ldr	r1, [pc, #232]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001244:	483d      	ldr	r0, [pc, #244]	@ (800133c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001246:	f000 f8d7 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::AF}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 800124a:	2303      	movs	r3, #3
 800124c:	2204      	movs	r2, #4
 800124e:	4937      	ldr	r1, [pc, #220]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001250:	483b      	ldr	r0, [pc, #236]	@ (8001340 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001252:	f000 f8d1 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
 8001256:	2303      	movs	r3, #3
 8001258:	2200      	movs	r2, #0
 800125a:	4934      	ldr	r1, [pc, #208]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800125c:	4839      	ldr	r0, [pc, #228]	@ (8001344 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800125e:	f000 f8cb 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
 8001262:	230b      	movs	r3, #11
 8001264:	2200      	movs	r2, #0
 8001266:	4933      	ldr	r1, [pc, #204]	@ (8001334 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001268:	4837      	ldr	r0, [pc, #220]	@ (8001348 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800126a:	f000 f8c5 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
	OIP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 800126e:	2303      	movs	r3, #3
 8001270:	2201      	movs	r2, #1
 8001272:	492e      	ldr	r1, [pc, #184]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001274:	4835      	ldr	r0, [pc, #212]	@ (800134c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001276:	f000 f8bf 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
	OIP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 800127a:	2303      	movs	r3, #3
 800127c:	2203      	movs	r2, #3
 800127e:	492b      	ldr	r1, [pc, #172]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001280:	4833      	ldr	r0, [pc, #204]	@ (8001350 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001282:	f000 f8b9 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
	Motor M1(&m1_c); /// OBJ Motor has the name M1 and the address of m1_c
 8001286:	492a      	ldr	r1, [pc, #168]	@ (8001330 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001288:	4832      	ldr	r0, [pc, #200]	@ (8001354 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800128a:	f000 f88b 	bl	80013a4 <_ZN5MotorC1EP11Moto_Config>
	Motor M2(&m2_c); /// OBJ Motor has the name M2 and the address of m2_c
 800128e:	492c      	ldr	r1, [pc, #176]	@ (8001340 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001290:	4831      	ldr	r0, [pc, #196]	@ (8001358 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001292:	f000 f887 	bl	80013a4 <_ZN5MotorC1EP11Moto_Config>
	Timer3 tim3(Period3,Speed);
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a31      	ldr	r2, [pc, #196]	@ (8001360 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	4830      	ldr	r0, [pc, #192]	@ (8001364 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80012a2:	f000 fdc5 	bl	8001e30 <_ZN6Timer3C1Ejj>
	Timer2 tim2(Period2);
 80012a6:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	482f      	ldr	r0, [pc, #188]	@ (800136c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80012ae:	f000 fd21 	bl	8001cf4 <_ZN6Timer2C1Ej>
	Delay del;
 80012b2:	482f      	ldr	r0, [pc, #188]	@ (8001370 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80012b4:	f000 fc7d 	bl	8001bb2 <_ZN5DelayC1Ev>
	Servo servo;
 80012b8:	482e      	ldr	r0, [pc, #184]	@ (8001374 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80012ba:	f000 fbed 	bl	8001a98 <_ZN5ServoC1Ev>
	US_Config US{{GPIOA, 10, MODE::Gen},{GPIOB, 8}};
 80012be:	2303      	movs	r3, #3
 80012c0:	220a      	movs	r2, #10
 80012c2:	491a      	ldr	r1, [pc, #104]	@ (800132c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80012c4:	482c      	ldr	r0, [pc, #176]	@ (8001378 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80012c6:	f000 f897 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>
 80012ca:	2208      	movs	r2, #8
 80012cc:	4919      	ldr	r1, [pc, #100]	@ (8001334 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80012ce:	482b      	ldr	r0, [pc, #172]	@ (800137c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80012d0:	f000 fab4 	bl	800183c <_ZN3OIPC1EP12GPIO_TypeDefh>
	UltraSound us(&US);
 80012d4:	4928      	ldr	r1, [pc, #160]	@ (8001378 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80012d6:	482a      	ldr	r0, [pc, #168]	@ (8001380 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80012d8:	f000 fe3e 	bl	8001f58 <_ZN10UltraSoundC1EP9US_Config>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <_Z41__static_initialization_and_destruction_0ii+0x116>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d11a      	bne.n	8001322 <_Z41__static_initialization_and_destruction_0ii+0x116>
 80012ec:	4824      	ldr	r0, [pc, #144]	@ (8001380 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80012ee:	f000 ff23 	bl	8002138 <_ZN10UltraSoundD1Ev>
	US_Config US{{GPIOA, 10, MODE::Gen},{GPIOB, 8}};
 80012f2:	4821      	ldr	r0, [pc, #132]	@ (8001378 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80012f4:	f7ff ff54 	bl	80011a0 <_ZN9US_ConfigD1Ev>
	Servo servo;
 80012f8:	481e      	ldr	r0, [pc, #120]	@ (8001374 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80012fa:	f7ff ff63 	bl	80011c4 <_ZN5ServoD1Ev>
	Timer2 tim2(Period2);
 80012fe:	481b      	ldr	r0, [pc, #108]	@ (800136c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001300:	f000 fd8c 	bl	8001e1c <_ZN6Timer2D1Ev>
	Timer3 tim3(Period3,Speed);
 8001304:	4817      	ldr	r0, [pc, #92]	@ (8001364 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001306:	f000 fe1d 	bl	8001f44 <_ZN6Timer3D1Ev>
	OIP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 800130a:	4811      	ldr	r0, [pc, #68]	@ (8001350 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800130c:	f000 fb70 	bl	80019f0 <_ZN3OIPD1Ev>
	OIP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 8001310:	480e      	ldr	r0, [pc, #56]	@ (800134c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001312:	f000 fb6d 	bl	80019f0 <_ZN3OIPD1Ev>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::AF}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 8001316:	480a      	ldr	r0, [pc, #40]	@ (8001340 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001318:	f7ff ff61 	bl	80011de <_ZN11Moto_ConfigD1Ev>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::AF}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800131e:	f7ff ff5e 	bl	80011de <_ZN11Moto_ConfigD1Ev>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010800 	.word	0x40010800
 8001330:	2000002c 	.word	0x2000002c
 8001334:	40010c00 	.word	0x40010c00
 8001338:	2000003c 	.word	0x2000003c
 800133c:	2000004c 	.word	0x2000004c
 8001340:	2000005c 	.word	0x2000005c
 8001344:	2000006c 	.word	0x2000006c
 8001348:	2000007c 	.word	0x2000007c
 800134c:	2000008c 	.word	0x2000008c
 8001350:	2000009c 	.word	0x2000009c
 8001354:	200000ac 	.word	0x200000ac
 8001358:	200000b4 	.word	0x200000b4
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	200000bc 	.word	0x200000bc
 8001368:	20000004 	.word	0x20000004
 800136c:	200000c0 	.word	0x200000c0
 8001370:	200000c4 	.word	0x200000c4
 8001374:	200000cc 	.word	0x200000cc
 8001378:	200000d8 	.word	0x200000d8
 800137c:	200000e8 	.word	0x200000e8
 8001380:	200000f8 	.word	0x200000f8

08001384 <_GLOBAL__sub_I_xQueue>:
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
 8001388:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff ff3d 	bl	800120c <_Z41__static_initialization_and_destruction_0ii>
 8001392:	bd80      	pop	{r7, pc}

08001394 <_GLOBAL__sub_D_xQueue>:
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
 8001398:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff35 	bl	800120c <_Z41__static_initialization_and_destruction_0ii>
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN5MotorC1EP11Moto_Config>:
 *      Author: AHMED ABDELAZIZ
 */

#include "motor.h"

Motor::Motor(Moto_Config * config) : Config_{config}
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	601a      	str	r2, [r3, #0]
{
STOP();
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f805 	bl	80013c4 <_ZN5Motor4STOPEv>
}
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN5Motor4STOPEv>:
	Config_->in2.ON();
	//Config_->en.PWMON();
}

void Motor::STOP()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fa0d 	bl	80017f0 <_ZN3OIP3OFFEv>
	Config_->in2.OFF();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3310      	adds	r3, #16
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fa07 	bl	80017f0 <_ZN3OIP3OFFEv>
	Config_->en.PWMOFF();
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3320      	adds	r3, #32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa18 	bl	800181e <_ZN3OIP6PWMOFFEv>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>:
uint8_t OIP::CountC;
uint8_t OIP::CountAF;

const unsigned int  Pause=0;
//OutPut
OIP::OIP(GPIO_TypeDef * GPIO, uint8_t pin, MODE mode) : Port_{GPIO}, Pin_{pin}, mode_{mode} //Output
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	4613      	mov	r3, r2
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	711a      	strb	r2, [r3, #4]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	609a      	str	r2, [r3, #8]
	{
			config port;
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe12 	bl	8001048 <_ZN6configC1Ev>

		if(GPIO == GPIOA)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4a8f      	ldr	r2, [pc, #572]	@ (8001664 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x26c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f040 8086 	bne.w	800153a <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x142>
		{
			if(mode == MODE::Gen)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d137      	bne.n	80014a4 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0xac>

		{
			if(CountA ==0)
 8001434:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10c      	bne.n	8001456 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x5e>
			{
			port.ENPA();//enable RCC for port A
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe1f 	bl	8001084 <_ZN6config4ENPAEv>
				Port_->CRL = 0x00000000;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 8001456:	4b84      	ldr	r3, [pc, #528]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8001460:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	2b07      	cmp	r3, #7
 8001468:	d80c      	bhi.n	8001484 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x8c>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	2203      	movs	r2, #3
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e18c      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001492:	3b08      	subs	r3, #8
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	2203      	movs	r2, #3
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e17c      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

		else if (mode == MODE::AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b0b      	cmp	r3, #11
 80014a8:	f040 8179 	bne.w	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{
			if(CountAF==0)
 80014ac:	4b6f      	ldr	r3, [pc, #444]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10a      	bne.n	80014ca <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0xd2>
			{
				//config port;
				port.AFIOP();
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe19 	bl	80010f0 <_ZN6config5AFIOPEv>
			CountAF++;
 80014be:	4b6b      	ldr	r3, [pc, #428]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b69      	ldr	r3, [pc, #420]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80014c8:	701a      	strb	r2, [r3, #0]
			}
			if(CountA ==0)
 80014ca:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0xf4>
			{
				port.ENPA();//enable RCC for port A
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fdd4 	bl	8001084 <_ZN6config4ENPAEv>
				Port_->CRL = 0x00000000;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 80014ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001668 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x270>)
 80014f6:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	2b07      	cmp	r3, #7
 80014fe:	d80c      	bhi.n	800151a <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x122>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220b      	movs	r2, #11
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e141      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001528:	3b08      	subs	r3, #8
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220b      	movs	r2, #11
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	e131      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

	}
		else if(GPIO == GPIOB)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x278>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f040 809a 	bne.w	8001678 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x280>
	{

		if(mode == MODE::Gen)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d137      	bne.n	80015ba <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x1c2>

	{
		if(CountB ==0)
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x174>
		{
			//config port;
			port.ENPB();//enable RCC for port B
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fda6 	bl	80010a8 <_ZN6config4ENPBEv>
			Port_->CRL = 0x00000000;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
		}
		CountB++;
 800156c:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8001576:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	2b07      	cmp	r3, #7
 800157e:	d80c      	bhi.n	800159a <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x1a2>
		{
			Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	2203      	movs	r2, #3
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e101      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
		else
		{
			Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80015a8:	3b08      	subs	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	e0f1      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
	}

	else if (mode == MODE::AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b0b      	cmp	r3, #11
 80015be:	f040 80ee 	bne.w	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
	{
		if(CountAF==0)
 80015c2:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x1e8>
		{
			//config port;
			port.AFIOP();
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd8e 	bl	80010f0 <_ZN6config5AFIOPEv>
			CountAF++;
 80015d4:	4b25      	ldr	r3, [pc, #148]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x274>)
 80015de:	701a      	strb	r2, [r3, #0]
		}
		if(CountB ==0)
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d116      	bne.n	8001616 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x21e>
		{
			config port;
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fd2b 	bl	8001048 <_ZN6configC1Ev>
			port.ENPB();//enable RCC for port B
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd56 	bl	80010a8 <_ZN6config4ENPBEv>
			Port_->CRL = 0x00000000;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
		}
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fd7f 	bl	8001114 <_ZN6configD1Ev>
		CountB++;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8001620:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	791b      	ldrb	r3, [r3, #4]
 8001626:	2b07      	cmp	r3, #7
 8001628:	d80c      	bhi.n	8001644 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x24c>
		{
			Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220b      	movs	r2, #11
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e0ac      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
		else
		{
			Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001652:	3b08      	subs	r3, #8
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220b      	movs	r2, #11
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e09c      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
 8001664:	40010800 	.word	0x40010800
 8001668:	2000010c 	.word	0x2000010c
 800166c:	2000010f 	.word	0x2000010f
 8001670:	40010c00 	.word	0x40010c00
 8001674:	2000010d 	.word	0x2000010d
		}
	}
	}
	else if(GPIO == GPIOC)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4a4f      	ldr	r2, [pc, #316]	@ (80017b8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 808e 	bne.w	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{

			if(mode == MODE::Gen)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d137      	bne.n	80016f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x300>

		{
			if(CountC ==0)
 8001688:	4b4c      	ldr	r3, [pc, #304]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x2b2>
			{
				//config port;
				port.ENPC();//enable RCC for port C
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fd19 	bl	80010cc <_ZN6config4ENPCEv>
				Port_->CRL = 0x00000000;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
			}
			CountC++;
 80016aa:	4b44      	ldr	r3, [pc, #272]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 80016b4:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d80c      	bhi.n	80016d8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x2e0>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	2203      	movs	r2, #3
 80016cc:	409a      	lsls	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e062      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016e6:	3b08      	subs	r3, #8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	2203      	movs	r2, #3
 80016ec:	409a      	lsls	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	e052      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

		else if (mode == MODE::AF)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b0b      	cmp	r3, #11
 80016fc:	d14f      	bne.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{
			if(CountAF==0)
 80016fe:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x324>
			{
				//config port;
				port.AFIOP();
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fcf0 	bl	80010f0 <_ZN6config5AFIOPEv>
				CountAF++;
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 800171a:	701a      	strb	r2, [r3, #0]
			}
			if(CountC ==0)
 800171c:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d116      	bne.n	8001752 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x35a>
			{
				config port;
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc8d 	bl	8001048 <_ZN6configC1Ev>
				port.ENPC();//enable RCC for port C
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcca 	bl	80010cc <_ZN6config4ENPCEv>
				Port_->CRL = 0x00000000;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
			}
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fce1 	bl	8001114 <_ZN6configD1Ev>
			CountC++;
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 800175c:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	2b07      	cmp	r3, #7
 8001764:	d80c      	bhi.n	8001780 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x388>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220b      	movs	r2, #11
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e00e      	b.n	800179e <_ZN3OIPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800178e:	3b08      	subs	r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220b      	movs	r2, #11
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
			}
		}

}

			OFF();
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f826 	bl	80017f0 <_ZN3OIP3OFFEv>
		}
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fcb3 	bl	8001114 <_ZN6configD1Ev>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4618      	mov	r0, r3
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40011000 	.word	0x40011000
 80017bc:	2000010e 	.word	0x2000010e
 80017c0:	2000010f 	.word	0x2000010f

080017c4 <_ZN3OIP2ONEv>:
void OIP::ON()
	{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
		Port_->ODR|=(1<<Pin_);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	4619      	mov	r1, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	408b      	lsls	r3, r1
 80017dc:	4619      	mov	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
	}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <_ZN3OIP3OFFEv>:
void OIP::OFF()
	{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
		Port_->ODR&=~(1<<Pin_);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	791b      	ldrb	r3, [r3, #4]
 8001802:	4619      	mov	r1, r3
 8001804:	2301      	movs	r3, #1
 8001806:	408b      	lsls	r3, r1
 8001808:	43db      	mvns	r3, r3
 800180a:	4619      	mov	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	400a      	ands	r2, r1
 8001812:	60da      	str	r2, [r3, #12]
	}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_ZN3OIP6PWMOFFEv>:
void OIP::PWMON()
{
	tim3.pwmWrite();
}
void OIP::PWMOFF()
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	tim3.pwmWrite(Pause);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	330c      	adds	r3, #12
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fb5d 	bl	8001eec <_ZN6Timer38pwmWriteEj>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <_ZN3OIPC1EP12GPIO_TypeDefh>:
//INPUT
OIP::OIP(GPIO_TypeDef *GPIO, uint8_t Pin) : Port_(GPIO), Pin_(Pin) //Input
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	711a      	strb	r2, [r3, #4]
{
	config port;
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fbf4 	bl	8001048 <_ZN6configC1Ev>
	if(GPIO == GPIOA)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4a5d      	ldr	r2, [pc, #372]	@ (80019d8 <_ZN3OIPC1EP12GPIO_TypeDefh+0x19c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d136      	bne.n	80018d6 <_ZN3OIPC1EP12GPIO_TypeDefh+0x9a>
	{
	if(CountA ==0)
 8001868:	4b5c      	ldr	r3, [pc, #368]	@ (80019dc <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10c      	bne.n	800188a <_ZN3OIPC1EP12GPIO_TypeDefh+0x4e>
	{
	port.ENPA();//enable RCC for port A
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc05 	bl	8001084 <_ZN6config4ENPAEv>
	Port_->CRL = 0x00000000;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
	Port_->CRH = 0x00000000;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
	}
	CountA++;
 800188a:	4b54      	ldr	r3, [pc, #336]	@ (80019dc <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a0>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a0>)
 8001894:	701a      	strb	r2, [r3, #0]

	if(Pin_< PIN_per_REG)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d80c      	bhi.n	80018b8 <_ZN3OIPC1EP12GPIO_TypeDefh+0x7c>
	{
		Port_->CRL |=(IP_Floating<<(Pin_ * BIT_per_PIN));
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	2204      	movs	r2, #4
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e00e      	b.n	80018d6 <_ZN3OIPC1EP12GPIO_TypeDefh+0x9a>
	}
	else
	{
		Port_->CRH |=(IP_Floating<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018c6:	3b08      	subs	r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	2204      	movs	r2, #4
 80018cc:	409a      	lsls	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
	}
}
	if(GPIO == GPIOB)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4a41      	ldr	r2, [pc, #260]	@ (80019e0 <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d136      	bne.n	800194c <_ZN3OIPC1EP12GPIO_TypeDefh+0x110>
	{
	if(CountB ==0)
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a8>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <_ZN3OIPC1EP12GPIO_TypeDefh+0xc4>
	{
	port.ENPB();//enable RCC for port B
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fbdc 	bl	80010a8 <_ZN6config4ENPBEv>
	Port_->CRL = 0x00000000;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
	Port_->CRH = 0x00000000;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
	}
	CountB++;
 8001900:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <_ZN3OIPC1EP12GPIO_TypeDefh+0x1a8>)
 800190a:	701a      	strb	r2, [r3, #0]

	if(Pin_< PIN_per_REG)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d80c      	bhi.n	800192e <_ZN3OIPC1EP12GPIO_TypeDefh+0xf2>
	{
		Port_->CRL |=(IP_Floating<<(Pin_ * BIT_per_PIN));
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e00e      	b.n	800194c <_ZN3OIPC1EP12GPIO_TypeDefh+0x110>
	}
	else
	{
		Port_->CRH |=(IP_Floating<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800193c:	3b08      	subs	r3, #8
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
	}
}
	if(GPIO == GPIOC)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4a26      	ldr	r2, [pc, #152]	@ (80019e8 <_ZN3OIPC1EP12GPIO_TypeDefh+0x1ac>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d136      	bne.n	80019c2 <_ZN3OIPC1EP12GPIO_TypeDefh+0x186>
	{
	if(CountC ==0)
 8001954:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <_ZN3OIPC1EP12GPIO_TypeDefh+0x1b0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <_ZN3OIPC1EP12GPIO_TypeDefh+0x13a>
	{
	port.ENPC();//enable RCC for port C
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbb3 	bl	80010cc <_ZN6config4ENPCEv>
	Port_->CRL = 0x00000000;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	Port_->CRH = 0x00000000;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
	}
	CountC++;
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <_ZN3OIPC1EP12GPIO_TypeDefh+0x1b0>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <_ZN3OIPC1EP12GPIO_TypeDefh+0x1b0>)
 8001980:	701a      	strb	r2, [r3, #0]

	if(Pin_< PIN_per_REG)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d80c      	bhi.n	80019a4 <_ZN3OIPC1EP12GPIO_TypeDefh+0x168>
	{
		Port_->CRL |=(IP_Floating<<(Pin_ * BIT_per_PIN));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	2204      	movs	r2, #4
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e00e      	b.n	80019c2 <_ZN3OIPC1EP12GPIO_TypeDefh+0x186>
	}
	else
	{
		Port_->CRH |=(IP_Floating<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019b2:	3b08      	subs	r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	2204      	movs	r2, #4
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
	}
}
	}
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fba4 	bl	8001114 <_ZN6configD1Ev>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010800 	.word	0x40010800
 80019dc:	2000010c 	.word	0x2000010c
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	2000010d 	.word	0x2000010d
 80019e8:	40011000 	.word	0x40011000
 80019ec:	2000010e 	.word	0x2000010e

080019f0 <_ZN3OIPD1Ev>:
uint32_t OIP::read()
{
	return Port_->IDR &(1<<Pin_);
}

OIP::~OIP()
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	{
		OFF();
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fef9 	bl	80017f0 <_ZN3OIP3OFFEv>
	}
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	330c      	adds	r3, #12
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fa9e 	bl	8001f44 <_ZN6Timer3D1Ev>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <pxCurrentTCBConst2>)
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	6808      	ldr	r0, [r1, #0]
 8001a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a2a:	f380 8809 	msr	PSP, r0
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f380 8811 	msr	BASEPRI, r0
 8001a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001a3e:	4770      	bx	lr

08001a40 <pxCurrentTCBConst2>:
 8001a40:	20000110 	.word	0x20000110
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
	...

08001a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001a50:	f3ef 8009 	mrs	r0, PSP
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <pxCurrentTCBConst>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a60:	6010      	str	r0, [r2, #0]
 8001a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001a66:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8001a6a:	f380 8811 	msr	BASEPRI, r0
 8001a6e:	f000 f8fb 	bl	8001c68 <vTaskSwitchContext>
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f380 8811 	msr	BASEPRI, r0
 8001a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	6808      	ldr	r0, [r1, #0]
 8001a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a86:	f380 8809 	msr	PSP, r0
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	4770      	bx	lr

08001a90 <pxCurrentTCBConst>:
 8001a90:	20000110 	.word	0x20000110
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop

08001a98 <_ZN5ServoC1Ev>:
 *      Author: AHMED ABDELAZIZ
 */


#include"servo.h"
Servo::Servo()
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f884 	bl	8001bb2 <_ZN5DelayC1Ev>
{
	OIP serv(GPIOA,2,MODE::AF);
 8001aaa:	f107 0008 	add.w	r0, r7, #8
 8001aae:	230b      	movs	r3, #11
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4906      	ldr	r1, [pc, #24]	@ (8001acc <_ZN5ServoC1Ev+0x34>)
 8001ab4:	f7ff fca0 	bl	80013f8 <_ZN3OIPC1EP12GPIO_TypeDefh4MODE>

}
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff97 	bl	80019f0 <_ZN3OIPD1Ev>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40010800 	.word	0x40010800

08001ad0 <_ZN5Servo14Servo_SetAngleEh>:
	void Servo::Servo_SetAngle(uint8_t angle)
	{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]

    // Calculate pulse width based on angle
   // uint32_t duty;
    if (angle > 180) angle = 180; // Limit to maximum angle
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2bb4      	cmp	r3, #180	@ 0xb4
 8001ae0:	d901      	bls.n	8001ae6 <_ZN5Servo14Servo_SetAngleEh+0x16>
 8001ae2:	23b4      	movs	r3, #180	@ 0xb4
 8001ae4:	70fb      	strb	r3, [r7, #3]
    float pulseWidth = (angle / 180.0f) + 1.0f; // Pulse width in ms
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f809 	bl	8000b00 <__aeabi_i2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	490f      	ldr	r1, [pc, #60]	@ (8001b30 <_ZN5Servo14Servo_SetAngleEh+0x60>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f90c 	bl	8000d10 <__aeabi_fdiv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ff4a 	bl	8000998 <__addsf3>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]

    // Calculate duty cycle (20 ms period)
    float dutyCycle = (pulseWidth / 20.0f) * 100.0f; // Duty cycle in %
 8001b08:	490a      	ldr	r1, [pc, #40]	@ (8001b34 <_ZN5Servo14Servo_SetAngleEh+0x64>)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff f900 	bl	8000d10 <__aeabi_fdiv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4909      	ldr	r1, [pc, #36]	@ (8001b38 <_ZN5Servo14Servo_SetAngleEh+0x68>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60bb      	str	r3, [r7, #8]
    // Map angle to pulse width (1.5 ms for 90 degrees, 1.7 ms for 150 degrees)
  //  duty = 1 + (angle/ 180); //(angle - 90) * 1000 / 60 + 1500; // Convert angle to pulse width in microseconds
   // uint32_t timerCounts = (pulseWidth  *(72000000 / 1000000)); // Convert to timer counts
   tim2.pwmWrite3(dutyCycle);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f940 	bl	8001da8 <_ZN6Timer29pwmWrite3Ef>
    //TIM2->CCR3 =pulseWidth;
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	43340000 	.word	0x43340000
 8001b34:	41a00000 	.word	0x41a00000
 8001b38:	42c80000 	.word	0x42c80000

08001b3c <_ZN5Servo7lookoutEv>:
void Servo::lookout()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	for(auto angle=0; angle<180;angle++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00f      	b.n	8001b6a <_ZN5Servo7lookoutEv+0x2e>
	{
		Servo_SetAngle(angle);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffbd 	bl	8001ad0 <_ZN5Servo14Servo_SetAngleEh>
		delay.delay_us(10000);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f867 	bl	8001c32 <_ZN5Delay8delay_usEm>
	for(auto angle=0; angle<180;angle++)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2bb3      	cmp	r3, #179	@ 0xb3
 8001b6e:	ddec      	ble.n	8001b4a <_ZN5Servo7lookoutEv+0xe>
	}

for(auto angle=180; angle>0;angle--)
 8001b70:	23b4      	movs	r3, #180	@ 0xb4
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	e00f      	b.n	8001b96 <_ZN5Servo7lookoutEv+0x5a>
{
	Servo_SetAngle(angle);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffa7 	bl	8001ad0 <_ZN5Servo14Servo_SetAngleEh>
	delay.delay_us(10000);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f851 	bl	8001c32 <_ZN5Delay8delay_usEm>
for(auto angle=180; angle>0;angle--)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dcec      	bgt.n	8001b76 <_ZN5Servo7lookoutEv+0x3a>
}
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <_ZN5DelayC1Ev>:
 */

#include "systik.h"

extern volatile uint32_t ticks;
	Delay::Delay()
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
{
		Init();
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f806 	bl	8001bcc <_ZN5Delay4InitEv>
}
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <_ZN5Delay4InitEv>:
void Delay::Init()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	SysTick->CTRL =0;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <_ZN5Delay4InitEv+0x34>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	//SysTick->LOAD =8000 -1; // Flag Operation takes 1 tick so -1 is set so that flag is the last tick
   // SysTick->VAL = 0; // Clear the current value register
	SysTick->CTRL =(1<<2) |(1<<1);
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <_ZN5Delay4InitEv+0x34>)
 8001bdc:	2206      	movs	r2, #6
 8001bde:	601a      	str	r2, [r3, #0]
	SysTick->LOAD =(OSC/usec)-1;
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN5Delay4InitEv+0x34>)
 8001be2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001be6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL |=(1<<0); // enable at last as a safety pattern
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <_ZN5Delay4InitEv+0x34>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <_ZN5Delay4InitEv+0x34>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <_ZN5Delay15SysTick_HandlerEv>:
//INTERRUPT Handler (don't have to write it in stm32f1xx_it.c) okay if it's deleted or delete
//or delete void SysTick_handler() function;
//written in c not c++ may cause errors so it better be removed
extern "C" void Delay::SysTick_Handler()  //from startup>>startup_stm32f103c8tx000.s
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	//do something every 1ms..
	if(ticks!=0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <_ZN5Delay15SysTick_HandlerEv+0x24>
	{
		ticks--;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
	}
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <_ZN5Delay8delay_usEm>:

void Delay::delay_us(uint32_t us)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	ticks = us;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
	while(ticks)
 8001c42:	e002      	b.n	8001c4a <_ZN5Delay8delay_usEm+0x18>
	{
		SysTick_Handler();
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffdd 	bl	8001c04 <_ZN5Delay15SysTick_HandlerEv>
	while(ticks)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f3      	bne.n	8001c44 <_ZN5Delay8delay_usEm+0x12>
	//__WFI();
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <vTaskSwitchContext+0x78>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <vTaskSwitchContext+0x7c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001c7c:	e02b      	b.n	8001cd6 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <vTaskSwitchContext+0x7c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <vTaskSwitchContext+0x80>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
    __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint8_t ucReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	70fb      	strb	r3, [r7, #3]

        return ucReturn;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f1c3 031f 	rsb	r3, r3, #31
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <vTaskSwitchContext+0x84>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3308      	adds	r3, #8
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d103      	bne.n	8001cc8 <vTaskSwitchContext+0x60>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <vTaskSwitchContext+0x88>)
 8001cd0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <vTaskSwitchContext+0x88>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
    }
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000194 	.word	0x20000194
 8001ce4:	20000190 	.word	0x20000190
 8001ce8:	2000018c 	.word	0x2000018c
 8001cec:	20000114 	.word	0x20000114
 8001cf0:	20000110 	.word	0x20000110

08001cf4 <_ZN6Timer2C1Ej>:

#include "timer2.h"
uint8_t Timer2::Counttim;
unsigned int Timer2::PERIOD=0;

Timer2::Timer2(unsigned int  Period)
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
{
		PERIOD=Period;
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <_ZN6Timer2C1Ej+0x3c>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6013      	str	r3, [r2, #0]

	if(Counttim==0)
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <_ZN6Timer2C1Ej+0x40>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <_ZN6Timer2C1Ej+0x24>
	{
		Tim2_Init(PERIOD);
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_ZN6Timer2C1Ej+0x3c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f810 	bl	8001d38 <_ZN6Timer29Tim2_InitEj>
	}
	Counttim++;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <_ZN6Timer2C1Ej+0x40>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <_ZN6Timer2C1Ej+0x40>)
 8001d22:	701a      	strb	r2, [r3, #0]
	}
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000019c 	.word	0x2000019c
 8001d34:	20000198 	.word	0x20000198

08001d38 <_ZN6Timer29Tim2_InitEj>:

void Timer2::Tim2_Init(unsigned int PERIOD)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]

	///<Intiate Clock 72>
	Clock72 clk;
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f914 	bl	8000f74 <_ZN7Clock72C1Ev>
	///<Enable Timer 2 RCC>
	RCC->APB1ENR |= (1<<0);
 8001d4c:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_ZN6Timer29Tim2_InitEj+0x6c>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <_ZN6Timer29Tim2_InitEj+0x6c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	61d3      	str	r3, [r2, #28]
	///<Reset Control Register just in case>
	TIM2->CR1=0x0000;
 8001d58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
	///<Set Pre-scaler>
	TIM2->PSC=71; // 72 / 71 +1 = 1MHZ timer clock speed.
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d64:	2247      	movs	r2, #71	@ 0x47
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
	///<Set Period>
	TIM2->ARR =PERIOD-1;
 8001d68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
	    //TIM2->CCMR2 |= (1 << 11); // Preload enable for channel 4
	///<Enable CH's and Polarity (Active-High)>
	 //Enable CH4
	 //TIM2->CCER =(1<<12);
    //<Preload Enable & PWM Mode 1 for CH3>
	 TIM2->CCMR2 |=(8<<0) |(6<<4);
 8001d72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d7c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001d80:	61d3      	str	r3, [r2, #28]
	///<Enable CH's and Polarity (Active-High)>
	 //<Enable CH1 & CH3>
	 TIM2->CCER =(1<<8);
 8001d82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d8a:	621a      	str	r2, [r3, #32]
    ///<Enable Control Register>
	 TIM2->CR1|=(1<<0);
 8001d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <_ZN6Timer29pwmWrite3Ef>:
	}
//	unsigned int PulseWidth =  PERIOD * Duty /100;
	TIM2->CCR3=Duty;
}
void Timer2::pwmWrite3(float duty)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	///<Making sure duty stays between 0% & 100%>
	if(duty < 0)
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f7ff f894 	bl	8000ee4 <__aeabi_fcmplt>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <_ZN6Timer29pwmWrite3Ef+0x22>
	{
		duty =0;
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	e008      	b.n	8001ddc <_ZN6Timer29pwmWrite3Ef+0x34>
	}
	else if (duty > 100)
 8001dca:	4912      	ldr	r1, [pc, #72]	@ (8001e14 <_ZN6Timer29pwmWrite3Ef+0x6c>)
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7ff f8a7 	bl	8000f20 <__aeabi_fcmpgt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <_ZN6Timer29pwmWrite3Ef+0x34>
	{
		duty=100;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <_ZN6Timer29pwmWrite3Ef+0x6c>)
 8001dda:	603b      	str	r3, [r7, #0]
	}
	float PulseWidth =  PERIOD * duty /100;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <_ZN6Timer29pwmWrite3Ef+0x70>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fe89 	bl	8000af8 <__aeabi_ui2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fedc 	bl	8000ba8 <__aeabi_fmul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <_ZN6Timer29pwmWrite3Ef+0x6c>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ff8b 	bl	8000d10 <__aeabi_fdiv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60fb      	str	r3, [r7, #12]
	TIM2->CCR3=PulseWidth;
 8001dfe:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff f896 	bl	8000f34 <__aeabi_f2uiz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	42c80000 	.word	0x42c80000
 8001e18:	2000019c 	.word	0x2000019c

08001e1c <_ZN6Timer2D1Ev>:
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
	TIM2->CCR3=PulseWidth;
}
*/
Timer2::~Timer2()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <_ZN6Timer3C1Ejj>:

#include "timer3.h"
uint8_t Timer3::Counttim;
unsigned int Timer3::PERIOD=0;

Timer3::Timer3(unsigned int  Period,unsigned int  duty)  :		Duty{duty}
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
	{
		PERIOD=Period;
 8001e42:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <_ZN6Timer3C1Ejj+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6013      	str	r3, [r2, #0]

	if(Counttim==0)
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <_ZN6Timer3C1Ejj+0x48>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <_ZN6Timer3C1Ejj+0x2c>
	{
		Tim3_Init(PERIOD);
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <_ZN6Timer3C1Ejj+0x44>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f810 	bl	8001e7c <_ZN6Timer39Tim3_InitEj>
	}
	Counttim++;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <_ZN6Timer3C1Ejj+0x48>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <_ZN6Timer3C1Ejj+0x48>)
 8001e66:	701a      	strb	r2, [r3, #0]
	}
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200001a4 	.word	0x200001a4
 8001e78:	200001a0 	.word	0x200001a0

08001e7c <_ZN6Timer39Tim3_InitEj>:

void Timer3::Tim3_Init(unsigned int PERIOD)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

	///<Intiate Clock 72>
	Clock72 clk;
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f872 	bl	8000f74 <_ZN7Clock72C1Ev>
	///<Enable Timer 3 RCC>
	RCC->APB1ENR |= (1<<1);
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <_ZN6Timer39Tim3_InitEj+0x68>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <_ZN6Timer39Tim3_InitEj+0x68>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	61d3      	str	r3, [r2, #28]
	///<Reset Control Register just in case>
	TIM3->CR1=0x0000;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
	///<Set Pre-scaler>
	TIM3->PSC=71; // 72 / 71 +1 = 1MHZ timer clock speed.
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001ea4:	2247      	movs	r2, #71	@ 0x47
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
	///<Set Period>
	TIM3->ARR =PERIOD-1;
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	///<Select PWM>
	 //<Preload Enable & PWM Mode 1 for CH1>
	 TIM3->CCMR1|= (8<<0) |(6<<4);
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001eb6:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001eba:	6193      	str	r3, [r2, #24]
     //<Preload Enable & PWM Mode 1 for CH3>
	 TIM3->CCMR2 |=(8<<0) |(6<<4);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001ec2:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001ec6:	61d3      	str	r3, [r2, #28]
	///<Enable CH's and Polarity (Active-High)>
	 //<Enable CH1 & CH3>
	 TIM3->CCER =(1<<0)|(1<<8);
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001eca:	f240 1201 	movw	r2, #257	@ 0x101
 8001ece:	621a      	str	r2, [r3, #32]
    ///<Enable Control Register>
	 TIM3->CR1|=(1<<0);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40000400 	.word	0x40000400

08001eec <_ZN6Timer38pwmWriteEj>:
	TIM3->CCR1=PulseWidth;
	TIM3->CCR3=PulseWidth;
}

void Timer3::pwmWrite(unsigned int duty)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	Duty=duty;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	601a      	str	r2, [r3, #0]
	///<Making sure duty stays between 0% & 100%>
	if(Duty < 0)
	{
		Duty =0;
	}
	else if (Duty > 100)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b64      	cmp	r3, #100	@ 0x64
 8001f02:	d902      	bls.n	8001f0a <_ZN6Timer38pwmWriteEj+0x1e>
	{
		Duty=100;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2264      	movs	r2, #100	@ 0x64
 8001f08:	601a      	str	r2, [r3, #0]
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <_ZN6Timer38pwmWriteEj+0x4c>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <_ZN6Timer38pwmWriteEj+0x50>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	60fb      	str	r3, [r7, #12]
	TIM3->CCR1=PulseWidth;
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <_ZN6Timer38pwmWriteEj+0x54>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR3=PulseWidth;
 8001f26:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <_ZN6Timer38pwmWriteEj+0x54>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200001a4 	.word	0x200001a4
 8001f3c:	51eb851f 	.word	0x51eb851f
 8001f40:	40000400 	.word	0x40000400

08001f44 <_ZN6Timer3D1Ev>:
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
	TIM3->CCR3=PulseWidth;
}

Timer3::~Timer3()
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
{

}
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_ZN10UltraSoundC1EP9US_Config>:
    edges_  edgeDir = Rising;
    uint32_t R_E_C_V=0; //Rising Edge Count Value
    uint32_t F_E_C_V=0; //Falling Edge Count Value


    UltraSound::UltraSound(US_Config *config)
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f86e 	bl	8001048 <_ZN6configC1Ev>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe1e 	bl	8001bb2 <_ZN5DelayC1Ev>
    {
    	Init();
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f808 	bl	8001f8c <_ZN10UltraSound4InitEv>
    	Timer4_Init();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f817 	bl	8001fb0 <_ZN10UltraSound11Timer4_InitEv>
    }
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZN10UltraSound4InitEv>:
    void  UltraSound::Init()
    {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    	Config_->T.OFF();
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fc29 	bl	80017f0 <_ZN3OIP3OFFEv>
    	con.AFIOP();
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8a4 	bl	80010f0 <_ZN6config5AFIOPEv>

    }
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN10UltraSound11Timer4_InitEv>:
    }*/
  /*  void UltraSound::EXTI_IRQHandler()
    {
    }*/
    void UltraSound::Timer4_Init()
    {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    	Clock72 clk;
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ffd9 	bl	8000f74 <_ZN7Clock72C1Ev>
        // Enable clock for TIM2
        RCC->APB1ENR |= (1 << 2); // Enable TIM5 clock
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <_ZN10UltraSound11Timer4_InitEv+0x48>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <_ZN10UltraSound11Timer4_InitEv+0x48>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	61d3      	str	r3, [r2, #28]
        // Set prescaler and auto-reload value for measuring time
        TIM4->CR1=0x0000;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <_ZN10UltraSound11Timer4_InitEv+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
       TIM4->PSC = 72-1; // Prescaler for 1 MHz timer (72 MHz / 72 = 1 MHz)
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <_ZN10UltraSound11Timer4_InitEv+0x4c>)
 8001fd6:	2247      	movs	r2, #71	@ 0x47
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
        TIM4->ARR = 0xFFFF; // Maximum value for auto-reload
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <_ZN10UltraSound11Timer4_InitEv+0x4c>)
 8001fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM4->CR1 |= (1 << 0); // Enable TIM4
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <_ZN10UltraSound11Timer4_InitEv+0x4c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <_ZN10UltraSound11Timer4_InitEv+0x4c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
    }
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40000800 	.word	0x40000800

08002000 <TIM4_IRQHandler>:

    // External interrupt handler for TIM2 input capture
    extern "C" void TIM4_IRQHandler(void)
    {
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
        if( (TIM4->SR & (1 << 2)))
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <TIM4_IRQHandler+0x5c>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01b      	beq.n	8002052 <TIM4_IRQHandler+0x52>
        {
        	// Check if the capture/compare interrupt flag is set
            if (edgeDir == Rising)
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <TIM4_IRQHandler+0x60>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <TIM4_IRQHandler+0x32>
            {
            	R_E_C_V = TIM4->CCR3; // Capture rising edge
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <TIM4_IRQHandler+0x5c>)
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	4a0f      	ldr	r2, [pc, #60]	@ (8002064 <TIM4_IRQHandler+0x64>)
 8002028:	6013      	str	r3, [r2, #0]
                edgeDir = Falling; // Switch to falling edge
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <TIM4_IRQHandler+0x60>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e009      	b.n	8002046 <TIM4_IRQHandler+0x46>
            }
            else
            {
            	F_E_C_V = TIM4->CCR3; // Capture falling edge
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <TIM4_IRQHandler+0x5c>)
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	4a0c      	ldr	r2, [pc, #48]	@ (8002068 <TIM4_IRQHandler+0x68>)
 8002038:	6013      	str	r3, [r2, #0]
                edgeDir = Rising; // Switch back to rising edge
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <TIM4_IRQHandler+0x60>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
                ecFlag = HC_SR04_ECHOCAPTURE_COMPLETE; // Set flag to indicate capture is complete
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <TIM4_IRQHandler+0x6c>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
            }
            TIM4->SR &= ~(1 << 2); // Clear interrupt flag
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <TIM4_IRQHandler+0x5c>)
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	4a04      	ldr	r2, [pc, #16]	@ (800205c <TIM4_IRQHandler+0x5c>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6113      	str	r3, [r2, #16]
        }
    }
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40000800 	.word	0x40000800
 8002060:	200001ad 	.word	0x200001ad
 8002064:	200001b0 	.word	0x200001b0
 8002068:	200001b4 	.word	0x200001b4
 800206c:	200001ac 	.word	0x200001ac

08002070 <_ZN10UltraSound7TriggerEv>:
    void UltraSound::Trigger()
    {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    	Config_->T.ON();
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fba1 	bl	80017c4 <_ZN3OIP2ONEv>
    	delay.delay_us(10);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	330c      	adds	r3, #12
 8002086:	210a      	movs	r1, #10
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fdd2 	bl	8001c32 <_ZN5Delay8delay_usEm>
    	Config_->T.OFF();
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fbac 	bl	80017f0 <_ZN3OIP3OFFEv>
    }
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZN10UltraSound13Read_DistanceEv>:

    float UltraSound::Read_Distance()
    {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
        // Trigger the ultrasonic sensor
    	Trigger();
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe1 	bl	8002070 <_ZN10UltraSound7TriggerEv>

        // Wait for echo to be received
        ecFlag = HC_SR04_ECHOCAPTURE_RESET; // Reset the echo capture flag
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <_ZN10UltraSound13Read_DistanceEv+0x88>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
        while (ecFlag == HC_SR04_ECHOCAPTURE_RESET)
 80020b4:	bf00      	nop
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <_ZN10UltraSound13Read_DistanceEv+0x88>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0fb      	beq.n	80020b6 <_ZN10UltraSound13Read_DistanceEv+0x16>
        {
            // Wait for echo to be captured
        }

        // Calculate the distance
        if (F_E_C_V > R_E_C_V)
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <_ZN10UltraSound13Read_DistanceEv+0x8c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <_ZN10UltraSound13Read_DistanceEv+0x90>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d920      	bls.n	800210c <_ZN10UltraSound13Read_DistanceEv+0x6c>
        {
                Distance = ((F_E_C_V - R_E_C_V) * SpeedofSound);
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <_ZN10UltraSound13Read_DistanceEv+0x8c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <_ZN10UltraSound13Read_DistanceEv+0x90>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f97d 	bl	80003d4 <__aeabi_ui2d>
 80020da:	a311      	add	r3, pc, #68	@ (adr r3, 8002120 <_ZN10UltraSound13Read_DistanceEv+0x80>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe f9f2 	bl	80004c8 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020f4:	f7fe fb12 	bl	800071c <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fbf4 	bl	80008ec <__aeabi_d2f>
 8002104:	4603      	mov	r3, r0
 8002106:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <_ZN10UltraSound13Read_DistanceEv+0x94>)
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e003      	b.n	8002114 <_ZN10UltraSound13Read_DistanceEv+0x74>

        } else {
            Distance = 0; // Invalid distance
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <_ZN10UltraSound13Read_DistanceEv+0x94>)
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        // Prepare the distance string for UART transmission

           // sprintf(uartBuffer, "Distance = %.1f cm\r\n", distance);

        return Distance;
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <_ZN10UltraSound13Read_DistanceEv+0x94>)
 8002116:	681b      	ldr	r3, [r3, #0]
        // Transmit the distance over UART
       // UART_Transmit(uartBuffer);
    }
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	04816f00 	.word	0x04816f00
 8002124:	3fa18fc5 	.word	0x3fa18fc5
 8002128:	200001ac 	.word	0x200001ac
 800212c:	200001b4 	.word	0x200001b4
 8002130:	200001b0 	.word	0x200001b0
 8002134:	200001a8 	.word	0x200001a8

08002138 <_ZN10UltraSoundD1Ev>:

    UltraSound::~UltraSound()
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    {

    }
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3308      	adds	r3, #8
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fe69 	bl	8001e1c <_ZN6Timer2D1Ev>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ffe0 	bl	8001114 <_ZN6configD1Ev>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff fd21 	bl	8001ba6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480b      	ldr	r0, [pc, #44]	@ (8002194 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002166:	490c      	ldr	r1, [pc, #48]	@ (8002198 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002168:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <LoopFillZerobss+0x16>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800217c:	4c09      	ldr	r4, [pc, #36]	@ (80021a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f000 f80f 	bl	80021ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218e:	f7fe ffcb 	bl	8001128 <main>
  bx lr
 8002192:	4770      	bx	lr
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800219c:	0800221c 	.word	0x0800221c
  ldr r2, =_sbss
 80021a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021a4:	200001b8 	.word	0x200001b8

080021a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_2_IRQHandler>
	...

080021ac <__libc_init_array>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	2600      	movs	r6, #0
 80021b0:	4d0c      	ldr	r5, [pc, #48]	@ (80021e4 <__libc_init_array+0x38>)
 80021b2:	4c0d      	ldr	r4, [pc, #52]	@ (80021e8 <__libc_init_array+0x3c>)
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	42a6      	cmp	r6, r4
 80021ba:	d109      	bne.n	80021d0 <__libc_init_array+0x24>
 80021bc:	f000 f81a 	bl	80021f4 <_init>
 80021c0:	2600      	movs	r6, #0
 80021c2:	4d0a      	ldr	r5, [pc, #40]	@ (80021ec <__libc_init_array+0x40>)
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <__libc_init_array+0x44>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d105      	bne.n	80021da <__libc_init_array+0x2e>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d4:	4798      	blx	r3
 80021d6:	3601      	adds	r6, #1
 80021d8:	e7ee      	b.n	80021b8 <__libc_init_array+0xc>
 80021da:	f855 3b04 	ldr.w	r3, [r5], #4
 80021de:	4798      	blx	r3
 80021e0:	3601      	adds	r6, #1
 80021e2:	e7f2      	b.n	80021ca <__libc_init_array+0x1e>
 80021e4:	0800220c 	.word	0x0800220c
 80021e8:	0800220c 	.word	0x0800220c
 80021ec:	0800220c 	.word	0x0800220c
 80021f0:	08002214 	.word	0x08002214

080021f4 <_init>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr

08002200 <_fini>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	bf00      	nop
 8002204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002206:	bc08      	pop	{r3}
 8002208:	469e      	mov	lr, r3
 800220a:	4770      	bx	lr
